{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/malinikrishnamurthy/Desktop/react-examples/react-sample-1/disco/src/App.js\";\nimport React from 'react';\nimport './App.css'; //HTML Drag and Drop API\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [{\n        id: 1,\n        title: \"Buy Milk\",\n        description: \"order online on big basket\",\n        status: \"todo\"\n      }, {\n        id: 2,\n        title: \"book\",\n        description: \"return library book\",\n        status: \"todo\"\n      }, {\n        id: 3,\n        title: \"exercise\",\n        description: \"do yoga and go on a walk\",\n        status: \"todo\"\n      }, {\n        id: 4,\n        title: \"water\",\n        description: \"drink 4l water everyday\",\n        status: \"todo\"\n      }, {\n        id: 5,\n        title: \"cat\",\n        description: \"feed the cat\",\n        status: \"todo\"\n      }]\n    };\n\n    this.onDragStart = (event, taskName) => {\n      event.dataTransfer.setData(\"taskName\", taskName);\n    };\n\n    this.onDragOver = event => {\n      event.preventDefault();\n    };\n\n    this.onDrop = (event, cat) => {\n      let taskName = event.dataTransfer.getData(\"taskName\");\n      let tasks = this.state.tasks.filter(task => {\n        if (task.taskName == taskName) {\n          task.type = cat;\n        }\n\n        return task;\n      });\n      this.setState({ ...this.state,\n        tasks\n      });\n    };\n  }\n\n  render() {\n    var tasks = {\n      inProgress: [],\n      Done: []\n    };\n    this.state.tasks.forEach(task => {\n      tasks[task.type].push( /*#__PURE__*/_jsxDEV(\"div\", {\n        onDragStart: event => this.onDragStart(event, task.taskName),\n        draggable: true,\n        className: \"draggable\",\n        style: {\n          backgroundColor: task.bgcolor\n        },\n        children: task.taskName\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this));\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drag-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"head\",\n        children: \"To Do List Drag & Drop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inProgress\",\n        onDragOver: event => this.onDragOver(event),\n        onDrop: event => {\n          this.onDrop(event, \"inProgress\");\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"group-header\",\n          children: \"In Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), tasks.inProgress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"droppable\",\n        onDragOver: event => this.onDragOver(event),\n        onDrop: event => this.onDrop(event, \"Done\"),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"group-header\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), tasks.Done]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  } // //first event on drag\n  // onDragStart = (event, taskid, taskstatus) => {\n  //   event.dataTransfer.setData(\"taskid\", taskid);\n  //   event.dataTransfer.setData(\"taskstatus\", taskstatus);\n  // }\n  // onDrop = (event, targetstatus) => {\n  //   const taskid = event.dataTransfer.getData(\"taskid\");\n  //   const taskstatus = event.dataTransfer.getData(\"taskstatus\");\n  //  const draggedtask = this.state.alltasks[taskstatus].filter((task) => {\n  //     if (task.id == taskid) {\n  //       return task;\n  //     }\n  //   });\n  //   let aKeys = Object.keys(this.state.alltasks);\n  //   let tasks = {};\n  //   for (const key in aKeys) {\n  //     if(aKeys[key] == targetstatus){\n  //       tasks[aKeys[key]] = draggedtask[0];\n  //     }\n  //     if(aKeys[key] == taskstatus){\n  //       this.state.alltasks[aKeys[key]].forEach(task => {\n  //           if(task.id !== taskid){\n  //             tasks[aKeys[key]] = task;\n  //           }\n  //       });\n  //     }\n  //   }\n  //   this.setState({...this.state, tasks});\n  //   event.preventDefault()\n  // }\n  // onDragOver = (event) => {\n  //   event.preventDefault();\n  // }\n  // render() {\n  //   const alltasks = {\n  //     todo: [],\n  //     inprocess: [],\n  //     blocked: [],\n  //     completed: []\n  //   };\n  //   let aKeys = Object.keys(this.state.alltasks);\n  //   for (const key in aKeys) {\n  //     const indtasks = this.state.alltasks[aKeys[key]];\n  //     indtasks.forEach(task => {\n  //       const taskstatus = aKeys[key];\n  //       alltasks[taskstatus].push(<div id={task.id} className=\"task\" draggable onDragStart={(event) => this.onDragStart(event, task.id, taskstatus)}>\n  //         <div draggable=\"false\" className=\"title\">{task.title}</div>\n  //         <div draggable=\"false\" className=\"description\">{task.description}</div>\n  //       </div>)\n  //     })\n  //   }\n  //   return (\n  //     <React.Fragment>\n  //       <h1 className=\"top-header\">Kanban Board</h1>\n  //       <div class=\"kanban-board\">\n  //         <div class=\"kanban\">\n  //           <h2> + To Do</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"todo\")} onDragOver={(event) => this.onDragOver(event)}> {alltasks.todo}</div>\n  //         </div>\n  //         <div class=\"kanban\">\n  //           <h2> + In Process</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"inprocess\")} onDragOver={(event) => this.onDragOver(event)}>{alltasks.inprocess}</div>\n  //         </div>\n  //         <div class=\"kanban\" onDrop={(event) => this.onDrop(event, \"blocked\")} onDragOver={(event) => this.onDragOver(event)}>\n  //           <h2> + Blocked</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"blocked\")} onDragOver={(event) => this.onDragOver(event)}>{alltasks.blocked}</div>\n  //         </div>\n  //         <div class=\"kanban\" onDrop={(event) => this.onDrop(event, \"completed\")} onDragOver={(event) => this.onDragOver(event)}>\n  //           <h2> + Completed</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"completed\")} onDragOver={(event) => this.onDragOver(event)}>{alltasks.completed}</div>\n  //         </div>\n  //       </div>\n  //     </React.Fragment>\n  //   )\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/malinikrishnamurthy/Desktop/react-examples/react-sample-1/disco/src/App.js"],"names":["React","App","Component","state","tasks","id","title","description","status","onDragStart","event","taskName","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","filter","task","type","setState","render","inProgress","Done","forEach","push","backgroundColor","bgcolor"],"mappings":"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QAAA,MAAM,EAAGA,KAAD,IAAW,KAAKM,MAAL,CAAYN,KAAZ,EAAmB,MAAnB,CAFrB;AAAA,gCAGE;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIGN,KAAK,CAACqB,IAJT;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD,GA5F+B,CA8FhC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlLgC;;AAqLlC,eAAexB,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\n//HTML Drag and Drop API\n\nclass App extends React.Component {\n  state = {\n    tasks: [\n      {\n        id: 1,\n        title: \"Buy Milk\",\n        description: \"order online on big basket\",\n        status: \"todo\"\n      },\n      {\n        id: 2,\n        title: \"book\",\n        description: \"return library book\",\n        status: \"todo\"\n      },\n      {\n        id: 3,\n        title: \"exercise\",\n        description: \"do yoga and go on a walk\",\n        status: \"todo\"\n      },\n      {\n        id: 4,\n        title: \"water\",\n        description: \"drink 4l water everyday\",\n        status: \"todo\"\n      },\n      {\n        id: 5,\n        title: \"cat\",\n        description: \"feed the cat\",\n        status: \"todo\"\n      }]\n  };\n\n  onDragStart = (event, taskName) => {\n    event.dataTransfer.setData(\"taskName\", taskName);\n  }\n  onDragOver = (event) => {\n    event.preventDefault();\n  }\n\n  onDrop = (event, cat) => {\n    let taskName = event.dataTransfer.getData(\"taskName\");\n\n    let tasks = this.state.tasks.filter((task) => {\n      if (task.taskName == taskName) {\n        task.type = cat;\n      }\n      return task;\n    });\n\n    this.setState({\n      ...this.state,\n      tasks\n    });\n  }\n  render() {\n    var tasks = {\n      inProgress: [],\n      Done: []\n    }\n\n    this.state.tasks.forEach((task) => {\n      tasks[task.type].push(\n        <div key={task.id}\n          onDragStart={(event) => this.onDragStart(event, task.taskName)}\n          draggable\n          className=\"draggable\"\n          style={{ backgroundColor: task.bgcolor }}>\n          {task.taskName}\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"drag-container\">\n        <h2 className=\"head\">To Do List Drag & Drop</h2>\n        <div className=\"inProgress\"\n          onDragOver={(event) => this.onDragOver(event)}\n          onDrop={(event) => { this.onDrop(event, \"inProgress\") }}>\n          <span className=\"group-header\">In Progress</span>\n          {tasks.inProgress}\n        </div>\n        <div className=\"droppable\"\n          onDragOver={(event) => this.onDragOver(event)}\n          onDrop={(event) => this.onDrop(event, \"Done\")}>\n          <span className=\"group-header\">Done</span>\n          {tasks.Done}\n        </div>\n      </div>\n    );\n  }\n\n  // //first event on drag\n  // onDragStart = (event, taskid, taskstatus) => {\n  //   event.dataTransfer.setData(\"taskid\", taskid);\n  //   event.dataTransfer.setData(\"taskstatus\", taskstatus);\n  // }\n\n  // onDrop = (event, targetstatus) => {\n  //   const taskid = event.dataTransfer.getData(\"taskid\");\n  //   const taskstatus = event.dataTransfer.getData(\"taskstatus\");\n\n  //  const draggedtask = this.state.alltasks[taskstatus].filter((task) => {\n  //     if (task.id == taskid) {\n  //       return task;\n  //     }\n  //   });\n\n  //   let aKeys = Object.keys(this.state.alltasks);\n  //   let tasks = {};\n  //   for (const key in aKeys) {\n\n  //     if(aKeys[key] == targetstatus){\n  //       tasks[aKeys[key]] = draggedtask[0];\n  //     }\n  //     if(aKeys[key] == taskstatus){\n  //       this.state.alltasks[aKeys[key]].forEach(task => {\n  //           if(task.id !== taskid){\n  //             tasks[aKeys[key]] = task;\n  //           }\n  //       });\n  //     }\n  //   }\n\n  //   this.setState({...this.state, tasks});\n\n  //   event.preventDefault()\n  // }\n\n  // onDragOver = (event) => {\n  //   event.preventDefault();\n  // }\n\n  // render() {\n  //   const alltasks = {\n  //     todo: [],\n  //     inprocess: [],\n  //     blocked: [],\n  //     completed: []\n  //   };\n\n  //   let aKeys = Object.keys(this.state.alltasks);\n  //   for (const key in aKeys) {\n  //     const indtasks = this.state.alltasks[aKeys[key]];\n  //     indtasks.forEach(task => {\n  //       const taskstatus = aKeys[key];\n  //       alltasks[taskstatus].push(<div id={task.id} className=\"task\" draggable onDragStart={(event) => this.onDragStart(event, task.id, taskstatus)}>\n  //         <div draggable=\"false\" className=\"title\">{task.title}</div>\n  //         <div draggable=\"false\" className=\"description\">{task.description}</div>\n  //       </div>)\n  //     })\n  //   }\n\n  //   return (\n  //     <React.Fragment>\n  //       <h1 className=\"top-header\">Kanban Board</h1>\n  //       <div class=\"kanban-board\">\n  //         <div class=\"kanban\">\n  //           <h2> + To Do</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"todo\")} onDragOver={(event) => this.onDragOver(event)}> {alltasks.todo}</div>\n  //         </div>\n  //         <div class=\"kanban\">\n  //           <h2> + In Process</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"inprocess\")} onDragOver={(event) => this.onDragOver(event)}>{alltasks.inprocess}</div>\n  //         </div>\n  //         <div class=\"kanban\" onDrop={(event) => this.onDrop(event, \"blocked\")} onDragOver={(event) => this.onDragOver(event)}>\n  //           <h2> + Blocked</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"blocked\")} onDragOver={(event) => this.onDragOver(event)}>{alltasks.blocked}</div>\n  //         </div>\n  //         <div class=\"kanban\" onDrop={(event) => this.onDrop(event, \"completed\")} onDragOver={(event) => this.onDragOver(event)}>\n  //           <h2> + Completed</h2>\n  //           <div onDrop={(event) => this.onDrop(event, \"completed\")} onDragOver={(event) => this.onDragOver(event)}>{alltasks.completed}</div>\n  //         </div>\n  //       </div>\n  //     </React.Fragment>\n  //   )\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}